#summary Milestones and tasks for the GLSL Back End.

= Passed Milestones =

== First Milestone - Passed on 2011-03-11 (r207) ==

Achieve the following functionality

  * 1.2 desktop shaders

But not yet able to do

  * ES-specific features (e.g. precision qualifiers)
  * Loops
  * Function calls
  * Structures
  * Vertex shaders
  * outputs other than {{{gl_FragColor}}}
  * matrices (uncommon in fragment shaders)
  * new-style texturing; only 1.2 texturing is supported
  * arrays
  * bitwise assignments e.g. {{{|=}}} and the logical operator {{{^^}}}
  * a few built-ins: trunc(), not(), ...

=== Tasks completed ===

  * + Correct location of declarations for split control flow (JohnK)
  * + Have regression tests generating both Mesa IR and GLSL outputs (Michael)
  * + Finish generating Top IR texturing calls (Cody)
  * + Reconstruct texturing calls (Cody)
  * + Correct symbol names for external linkage (JohnK)
  * + Handle bool types in bottom (JohnK)
  * + Install an exception handling model so we can wrap failed runs and report the right error to the user. (Michael)
  * + Check all existing asserts and unsupported prints for correct usage in the exception model. (JohnK)
  * + Ensure all unsupported functionality has an exception raised, preferably going into Top IR, but somewhere
  * + Reduce output to just the shader (Michael)
  * + handle sampler types top to bottom (JohnK)
  * + broader set of tests for what is in this checkpoint (JohnK)
  * + Mixing scalars and vectors across operators (Cody)
  * + Top IR constructors, for simple common cases (Cody)
  * + Top IR L-value swizzling (Cody)
  * + GLSL back end-support for extract/insert (JohnK)
  * + Handle the (non-texturing) built-in functions (Cody)
  * + Run-time #version control of features: this is expected to be done through proper front-end translation to Top IR based on #version
  * + Have a better switch than gla::!UseTgsiBackend for controlling what back end is used (Michael)
  * + handle built-in state?: {{{gl_*}}} for uniforms, varyings, attributes:  revisit/fix the built-in stuff Cody and John turned off when bootstrapping the front-end adapter
  * + get constants working top to bottom (JohnK)
  * + Run-time tests for what mode it's in; simple, obfuscating, or optimizing (JohnK)
  * + latest version of GLSL2 (Cody)

= Upcoming Milestones =

== Second Milestone ==

  * Pretty much all normal shader stuff works for version 1.3.
  * All three modes work:  simplification, optimization, and obfuscation

=== Tasks Completed ===

  * + Middle-end pass to coalesce multiple inserts into a single L-value swizzle (Michael, r219) 
  * + Output revision number, in linux at least (Michael, r230)
  * + destructuring of swizzles in the Top IR into inserts/extracts (Michael, r236)
  * + Command-line argument for handling of optimizations (Michael, r240)
  * + Handle all the logical vs. bitwise operators in the back end {{{^, ^^, !, ~, not()}}} (JohnK, r248)
  * + bitwise assignments e.g. {{{|=}}} (JohnK, r248)

=== Things to do (who's currently working on it) not yet in priority order ===

  * - Add more LLVM optimizations (Michael)
  * - Add motivating examples for LLVM optimizations (Michael)
  * - Identify flow control we can't handle in Bottom IR (Michael)
  * - Top IR arrays for uniforms and inputs (Cody)
  * - GLSL back-end support for arrays for uniforms and inputs (JohnK)
  * - original variable names (JohnK)
  * - original line numbers
  * - control the output version of GLSL
  * - fix the linux/windows output differences in the test files
  * - 1.3 texturing
  * - Figure out how to keep matrices through the stack (JohnK)
  * - loop detection and support of normal/typical loops
  * - function calls (Cody, JohnK)
  * - vertex shaders
  * - {{{gl_FragDepth}}}, {{{gl_FragData}}}
  * - Fragment shader user-defined outputs
  * - matrices (uncommon in fragment shaders)
  * - support multiple compilations units for a single stage
  * - top IR driven tests
  * - llvm and gla namespace independent place to put in shared utility functions
  * - single-use expression/copy propagation during code generation (Michael)

== Third Milestone ==

  * Post 1.3.
  * Cross-stage interactions.
  * All non-goto flow control works.

=== Tasks Completed ===

=== Things to do (who's currently working on it) not yet in priority order ===

  * - need a parser that can do glsl 3.x, possibly 4.x
  * - investigate cross-stage optimizations, obfuscations, simplifications
  * - Mechanism for specifying what passes are done and when in an external file